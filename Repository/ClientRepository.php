<?php

namespace MesClics\EspaceClientBundle\Repository;

/**
 * ClientRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ClientRepository extends \Doctrine\ORM\EntityRepository
{
    public function myFindByName($name){
        $qb = $this->createQueryBuilder('client');
        $qb->where('client.nom = :name')->setParameter('name', $name);

        return $qb->getQuery()->getResult();
    }

    public function getClientsList($returnQueryBuilder = null){

        $qb = $this->createQueryBuilder('client');
        $qb->orderBy('client.nom', 'asc');
        
        if($returnQueryBuilder){
            return $qb;
        }
        return $qb->getQuery()->getResult();
    }

    public function countClients(){
        $qb = $this->createQueryBuilder('client');
        $qb->select('COUNT(client)');

        return $qb->getQuery()->getSingleScalarResult();
    }

    //récupérer les clients et leurs images
    public function getClientsWithImage(){
        $qb = $this->createQueryBuilder('c');
        $qb->leftJoin('c.image', 'i');
        $qb->addSelect('i');

        return $qb->getQuery()->getResult();
    }

    //récupérer un client et un de ses projets
    public function getClientWithProjet($client_id, $projet_id){
        $qb = $this
        ->createQueryBuilder('client')
        ->where('client.id = :client_id')
            ->setParameter('client_id', $client_id)
        ->leftJoin('client.projets', 'projet')
        ->addSelect('projet')
        ->andWhere('projet.id = :projet_id')
            ->setParameter('projet_id', $projet_id)
        ;

        return $qb->getQuery()->getResult();
    }

    //récupérer un client et tous ses projets
    public function getClientWithProjets($client_id){
        $qb = $this
        ->createQueryBuilder('client')
        ->where('client_id = :client_id')
            ->setParameter('client_id', $client_id)
        ->leftJoin('client.projets', 'projets')
        ->addSelect('projets')
        ;
        
        return $qb->getQuery()->getResult();
    }

    //récupere un client et tous ses projets en cours
    public function getClientWithProjetsNotClosed($client_id){
        $qb = $this
        ->createQueryBuilder('client')
        ->andWhere('client.id = :client_id')
            ->setParameter('client_id', $client_id)
        ->leftJoin('client.projets', 'projets')
        ->addSelect('projets')
        ->andWhere('projets.closed = :closed')
            ->setParameter('closed', false)
        ;

        return $qb->getQuery()->getResult();
    }

    //récupère un client et tous ses contrats
    public function getClientWithContrats($client_id){
        $qb = $this
        ->createQueryBuilder('client')
        ->andWhere('client.id = :client_id')
            ->setParameter('client_id', $client_id)
        ->leftJoin('client.contrats', 'contrats')
        ->addSelect('contrats')
        ;

        return $qb->getQuery()->getResult();
    }

    //récupère un client et un contrat
    public function getClientWithContrat($client_id, $contrat_id){
        $qb = $this
        ->createQueryBuilder('client')
        ->andWhere('client.id = :client_id')
            ->setParameter('client_id', $client_id)
        ->leftJoin('client.contrats', 'contrat')
        ->andWhere('contrat.id = :contrat_id')
            ->setParameter('contrat_id', $contrat_id)
        ->addSelect('contrat')
        ;

        return $qb->getQuery()->getResult();
    }

    public function lastClientNumeroBeginningWith($initials){
        $qb = $this->createQueryBuilder('c');
        $qb
            ->where('c.numero LIKE :numero')
            ->setParameter('numero', '%'.$initials.'%')
            ->orderBy('c.id', 'DESC');
        
        $result = $qb->getQuery()->getResult();
        if(!isset($result[0])){
            return null;
        } else{
            return $result[0];
        }
        
    }

    public function getClientByAlias($alias){
        $qb = $this->createQueryBuilder('c');
        $qb
            ->where('c.alias LIKE :alias')
            ->setParameter('alias', $alias);
        $result = $qb->getQuery()->getResult()[0];
         return $result;
    }
}
